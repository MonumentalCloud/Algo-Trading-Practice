# -*- coding: utf-8 -*-
"""Value trading.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IojeiMT3oJjzoJ0NkkeduXvGx3ybxqc_
"""

import numpy as np
import pandas as pd
import requests

from measures.secrets import IEX_CLOUD_API_TOKEN
from utils import chunks

stocks = pd.read_csv('../AlgoTrading/sp_500_stocks.csv')

#Grouping tickers into groups of 100
symbol_groups = list(chunks(stocks['Ticker'], 100))
symbol_strings = []

for i in range(0,len(symbol_groups)):
  symbol_strings.append(','.join(symbol_groups[i]))

my_columns = ['Ticker', 'Price', 'Price-to-Earnings Ratio', 'Num Shares to Buy']
final_dataframe = pd.DataFrame(columns = my_columns)

#symbol_strings = ["AAPL, A, AAL....","SMTH, AEI,... etc"]
# for symbol_string in symbol_strings:
#   batch_api_call_url = f"https://sandbox.iexapis.com/stable/stock/market/batch?symbols={symbol_string}&types=quote&token={IEX_CLOUD_API_TOKEN}"
#   data = requests.get(batch_api_call_url).json()
#   for symbol in symbol_string.split(','):
#     final_dataframe = final_dataframe.append(
#         pd.Series([
#                    symbol,
#                    data[symbol]['quote']['latestPrice'],
#                    data[symbol]['quote']['peRatio'],
#                    'n/a'
#         ], index=my_columns),
#         ignore_index=True
#     )
#
# final_dataframe.sort_values('Price-to-Earnings Ratio', ascending=False, inplace=True)
# final_dataframe = final_dataframe[final_dataframe['Price-to-Earnings Ratio'] > 0]
# final_dataframe = final_dataframe[:50]
# final_dataframe.reset_index(inplace=True, drop = True)
#
# #calculating the number of shares to buy
# portfolio_input()
#
# position_size = float(portfolio_size)/len(final_dataframe.index)
#
# for row in final_dataframe.index:
#   final_dataframe.loc[row, 'Number of Shares to Buy'] = math.floor(position_size/final_dataframe.loc[row, 'Price'])
#
# final_dataframe
#
# #Building a Better Value Strategy
# #buildling composite of pe ration, price to book ratio, price-to-sales ratio, Enterprise Value/EBITDA and  Enterprise Value/GrossProfit
#
# symbol = 'AAPL'
# batch_api_call_url = f"https://sandbox.iexapis.com/stable/stock/market/batch?symbols={symbol}&types=quote,advancedstats&token={IEX_CLOUD_API_TOKEN}"
# data = requests.get(batch_api_call_url).json()
#
#
# #PE ratio
# pe_ratio = data[symbol]['quote']['peRatio']
# #Price-to-book ratio
# pb_ratio = data[symbol]['advancedstats']['priceToBook']
# #Price-to-sale ratio
# ps_ratio = data[symbol]['advancedstats']['priceToSales']
# #Enterprise Value divided by EBITDA
# ev_to_ebitda = data[symbol]['advancedstats']['enterpriseValue']/data[symbol]['advancedstats']['EBITDA']
# #Enterprise Value divided by Gross Profit(EV/GP)
# ev_to_gross_profit = data[symbol]['advancedstats']['enterpriseValue']/data[symbol]['advancedstats']['grossProfit']
#
# #Robust Value
def robust_value_data():
    rv_columns = [
                  'Ticker',
                  'Price',
                  'Number of Shares to Buy',
                  'Price-to-Earnings Ratio',
                  'PE Percentile',
                  'Price-to-Book Ratio',
                  'PB Percentile',
                  'Price-to-Sales Ratio',
                  'PS Percentile',
                  'EV/EBITDA',
                  'EV/EBITDA Percentile',
                  'EV/GP',
                  'EV/GP Percentile',
                  'Robust Value Score'
    ]

    rv_dataframe = pd.DataFrame(columns = rv_columns)


    for symbol_string in symbol_strings:
      batch_api_call_url = f"https://sandbox.iexapis.com/stable/stock/market/batch?symbols={symbol_string}&types=quote,advancedstats&token={IEX_CLOUD_API_TOKEN}"
      data = requests.get(batch_api_call_url).json()
      for symbol in symbol_string.split(','):
        #PE ratio
        pe_ratio = data[symbol]['quote']['peRatio']
        #Price-to-book ratio
        pb_ratio = data[symbol]['advancedstats']['priceToBook']
        #Price-to-sale ratio
        ps_ratio = data[symbol]['advancedstats']['priceToSales']
        #Enterprise Value divided by EBITDA
        try:
          ev_to_ebitda = data[symbol]['advancedstats']['enterpriseValue']/data[symbol]['advancedstats']['EBITDA']
        except:
          ev_to_ebitda = np.NaN
        #Enterprise Value divided by Gross Profit(EV/GP)
        try:
          ev_to_gross_profit = data[symbol]['advancedstats']['enterpriseValue']/data[symbol]['advancedstats']['grossProfit']
        except:
          ev_to_gross_profit = np.NaN
        rv_dataframe = rv_dataframe.append(
            pd.Series([
                  symbol,
                  data[symbol]['quote']['latestPrice'],
                  'n/a',
                  pe_ratio,
                  'n/a',
                  pb_ratio,
                  'n/a',
                  ps_ratio,
                  'n/a',
                  ev_to_ebitda,
                  'n/a',
                  ev_to_gross_profit,
                  'n/a',
                  'n/a'

            ],index = rv_columns),
            ignore_index = True
        )

    for column in ['Price', 'Price-to-Earnings Ratio', 'Price-to-Book Ratio', 'Price-to-Sales Ratio', 'EV/EBITDA','EV/GP']:
      rv_dataframe[column].fillna(rv_dataframe[column].mean(), inplace=True)

    rv_dataframe[rv_dataframe.isnull().any(axis=1)]

    from scipy.stats import percentileofscore as score
    metrics = {
        'Price-to-Earnings Ratio' : 'PE Percentile',
                  'Price-to-Book Ratio':'PB Percentile',
                  'Price-to-Sales Ratio': 'PS Percentile',
                  'EV/EBITDA':'EV/EBITDA Percentile',
                  'EV/GP': 'EV/GP Percentile',
    }
    for metric in metrics.keys():
      for row in rv_dataframe.index:
        rv_dataframe.loc[row, metrics[metric]] = score(rv_dataframe[metric], rv_dataframe.loc[row,metric])



    #calculating the RV score

    from statistics import mean

    for row in rv_dataframe.index:
      value_percentiles = []
      for metric in metrics.values():
        value_percentiles.append(rv_dataframe.loc[row,metric])
      rv_dataframe.loc[row, 'Robust Value Score'] = mean(value_percentiles)



    # rv_dataframe.sort_values('Robust Value Score', ascending = True, inplace=True)

    #Now that we've calculated 50 value buys, let's calculate how much we shoule buy

    # portfolio_size = portfolio_input()
    #
    # position_size = float(portfolio_size)/len(rv_dataframe.index)
    #
    # for row in rv_dataframe.index:
    #   rv_dataframe.loc[row,'Number of Shares to Buy'] = position_size/float(rv_dataframe.loc[row,'Price'])

    return rv_dataframe
